1.Create a custom annotation called @Test which can be only applied on a method implying that the following method is a test-case. (Is it possible to restrict the annotation to be applied only on a non-static method?)

import java.lang.annotation.*;  
import java.lang.reflect.*;  
  
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
@interface Test
{  
	String str();  
}  
  
//Applying annotation @Test
class Me
{  
	@Test(str="Hiiiii")  
	public void testCase(){}  
}  
  
//Accessing annotation  @Test
class first
{  
	public static void main(String args[])throws Exception
	{  
	  
		Me h=new Me();  
		Method m=h.getClass().getMethod("testCase");  
	  
		Test ts=m.getAnnotation(Test.class);  
		System.out.println(ts.str());  
	}
}
Output
Hiiiii
2 Build a custom annotation called @Info, which can be used by developers on a class, a property, or a method. The developer can provide the following information when using this annotation: a) Authorld: <> - (Mandatory Input) b) Author: < - (Optional Input) c) Supervisor: <>- (Optional Input) d) Date: <<String Date" >> - (Mandatory Input) e) Time: << String Time >> - (Mandatory Input) f) Version: <> - (Mandatory Input) g) Description: <<Description of the class, method, or property >> - (Optional Input


import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
@Documented
@Retention(RetentionPolicy.RUNTIME)
@interface info 
{
  int  ID();
  String name();
  String superviser();
  String date();
  String time();   
  int version();
  String description();
}
// Applying annotation.
public class second {
	// Importing annotation on a method display().
	@info(ID = 111, name = "PALLAVI", superviser = "INDCAPGEMINI",date="18/01/2022",time="11:51:50 hrs",version=18,description="Check author info")
	public void display()
	{
	    System.out.println("Hello It's ANNOTATION");	
	    System.out.println();	
	 }
}


import java.lang.reflect.Method;
public class secondClass {

	public static void main(String[] args)throws NoSuchMethodException, SecurityException 
	{
		// TODO Auto-generated method stub
		second h = new second(); 
		   h.display();  
		   Method m = h.getClass().getMethod("display"); 
		   info st = m.getAnnotation(info.class);
		 
		   System.out.println("Author id : " +st.ID());
		   System.out.println("Author name: " +st.name());
		   System.out.println("Supervisor name: " +st.superviser());
		   System.out.println("Date: " +st.date());
		   System.out.println("Time: " +st.time());
		   System.out.println("Version: " +st.version());
		   System.out.println("Description :"+st.description());
	}

}




















Output
-------Author Details------
Hello It's ANNOTATION

Author id : 111
Author name: PALLAVI
Supervisor name: INDCAPGEMINI
Date: 18/01/2022
Time: 11:51:50 hrs
Version: 18
Description :Check author info

3 Create a custom annotation called @Execute to be applied on methods. Placing the @Execute method on a method implies that method should be invoked using Reflection API (Invoking the method using Reflection API is out of scope of this assignments). The annotation @Execute should have an optional property "sequence which can be given values such as 1, 2, 3... in the order of priority. In case the sequence property is not used the ADI may invoke methods in random order. E.g. Class MyClass @Execute(Sequence=2) Public void myMethod10){ } @Execute(Sequence=1) Public void myMethod2(){ } @Execute(Sequence=3) Public void myMethod30){ } } Note: The above annotation tells the system that the invocation should be in the order: myMethod2 first, followed by myMethodi and finally myMethod3

import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface Execute{
	int sequence();
}

class Myclass{
	
	@Execute(sequence=2)
	public void myMethod1() {System.out.println("From myMethod 1");}
	
	@Execute(sequence=1)
	public void myMethod2() {System.out.println("From myMethod 2");}
	
	@Execute(sequence=3)
	public void myMethod3() {System.out.println("From myMethod 3");}
}
public class ReflectInvoke {

	public static void main(String[] args) throws ReflectiveOperationException {
		// TODO Auto-generated method stub
		Myclass a = new Myclass();
		Method[] cm = a.getClass().getMethods();
		
		for (Method m : cm) {
			Annotation an = m.getAnnotation(Execute.class);
			Execute e = (Execute)an;
			
			if(e!=null) {
				try {
					m.invoke(a);
					m.invoke(e.sequence());
				}catch(Exception err) {
					System.out.println(err.getMessage());
				}
			}
        }
	}

}
Output
From myMethod 2
object is not an instance of declaring class
From myMethod 1
object is not an instance of declaring class
From myMethod 3
object is not an instance of declaring class