                                                               JAVA 11 Features 

########################################################################################
1.Write a program to calculate the Simple Interest with minimal code using features of Java 11. Hint: Use the concept of functional interface and Local variable syntax for lambda parameters.

import java.util.Scanner;

@FunctionalInterface
interface SI {
    int formula(int x,int y,int z);
}

public class Simpleinterest {

	public static void main(String[] args) {
		int p,r,t;
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the value for principal : ");
		p=sc.nextInt();
		System.out.println("Enter the value for rate : ");
		r=sc.nextInt();
		System.out.println("Enter the value for time : ");
		t=sc.nextInt();
		
		//lambda expression to define the simple interest formula
		SI s=(x,y,z)->(x*y*z)/100;
		
		int simp = s.formula(p,r,t);
	    System.out.println("Simple interest : "+simp);
	}
}
Output
Enter the value for principal : 
5000
Enter the value for rate : 
50
Enter the value for time : 
5
Simple interest : 12500
2.Java 11 supports var keyword for variable declarations. List the scenarios where var keyword cannot be used for such variable declarations. Give reason in support of your answer for each scenario.

Keyword var can be used for declaring local variables, including index variables of for-loops.var cannot be used for fields, method parameters, and method return types The reasons:

Cannot use for method parameters, and method return
Cannot use for fields
Suppose a field’s type was declared with var keyword. A change to the field’s initializer could change the field’s type, which might unexpectedly break reflective code.
public class testvar {
	
	public static void main(String[] args) {
		//without initialization
		var x;
		x=10;
		
		//not allowed as an element type of an array
		var list[]= {1,2,3};
		
		//Lambda expression needs an explicit target
		var obj =(a,b)->(a+b);
		
	}

}
Output
Exception in thread "main" java.lang.Error: Unresolved compilation problems: 
	Cannot use 'var' on variable without initializer
	Array initializer needs an explicit target-type
	'var' is not allowed as an element type of an array
	Lambda expression needs an explicit target-type

	at testvar.main(testvar.java:6)
3.“A quick brown fox jumps over the lazy dog". Create an ArrayList from the given String. Such an ArrayList should include each word from the given sentence. Finally convert such List to an array using Java 11 methods and print the output.

import java.util.ArrayList;
import java.util.Arrays;

public class ToArray {

	public static void main(String[] args) {
	
		ArrayList<String> l = new ArrayList<>();
		l.add("A");
		l.add("quick");
		l.add("brown");
		l.add("fox");
		l.add("jumps");
		l.add("over");
		l.add("the");
		l.add("lazy");
		l.add("dog");
		
		String arr[] = l.toArray(String[]::new);
		System.out.println(Arrays.toString(arr));	
	}
}
Output
[A, quick, brown, fox, jumps, over, the, lazy, dog]




4.Using features of Java 11, read the data from a text file (File name: StudentList.txt).Calculate the count of students and print the names as well as the total count of students on the screen. (If any line in file doesn't contain a name, for such a record blank space should not be printed in the output) Hint: Use java 11 features of files and String methods to reduce the lines of code to be written

package java11;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;

public class Reeadfile {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int cnt=0;
		var path = "C:\\Users\\ANIKET\\Desktop\\name.txt";
		try {
			String display = Files.readString(Path.of(path));
			String strArray[] = display.split("\\s");
			//System.out.println(Arrays.toString(strArray));
			
			System.out.println("Names of the Students : ");
			for(int i =0; i<strArray.length;i++) {
				if(!strArray[i].isBlank() && !strArray[i].isEmpty()) {
					cnt=cnt+1;
					System.out.println(strArray[i].stripLeading().stripTrailing());
				}
			}
			System.out.println("Number of the students in the file : "+cnt);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}

}

output\\
Aniket
Pallavi
Pratiksha
Prashant
Number of the students in the file : 4









package java11;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpClient.Version;
import java.net.http.HttpResponse.BodyHandlers;

public class Httprequest1 {

	public static void main(String[] args) {
		
		String uri = "https://httpbin.org/get";
		
		HttpRequest req = HttpRequest.newBuilder()
				.uri(URI.create(uri))
				.GET()
				.version(Version.HTTP_2)
				.build();
		
		HttpClient client = HttpClient.newBuilder()
				.build();
		
		try
		{
			HttpResponse<String> resp = client.send(req, BodyHandlers.ofString());
			System.out.println(resp.headers());
			System.out.println(resp.statusCode());
			System.out.println(resp.body());
		}
		catch(IOException | InterruptedException e)
		{
			e.printStackTrace();
		}

	}

}


output\\
java.net.http.HttpHeaders@6b6ec5e0 { {:status=[200], access-control-allow-credentials=[true], access-control-allow-origin=[*], content-length=[245], content-type=[application/json], date=[Sun, 23 Jan 2022 05:59:44 GMT], server=[gunicorn/19.9.0]} }
200
{
  "args": {}, 
  "headers": {
    "Host": "httpbin.org", 
    "User-Agent": "Java-http-client/17.0.1", 
    "X-Amzn-Trace-Id": "Root=1-61eceed0-659d29b3719035c350d22949"
  }, 
  "origin": "157.33.54.184", 
  "url": "https://httpbin.org/get"
}


